
      <footer class=" footer footer-static footer-light navbar-border navbar-shadow ">
        <div class="clearfix blue-grey lighten-2 text-sm-center mb-0 px-2 "><span class="float-md-left d-block d-md-inline-block ">2021  &copy; Copyright <a class="text-bold-800 grey darken-2 " href="# " target="_blank ">MyProject Desk</a></span>
         
        </div>
    </footer>
<!-- BEGIN VENDOR JS-->
<script src="/theme-assets/vendors/js/vendors.min.js" type="text/javascript"></script>
<!-- BEGIN VENDOR JS-->
<!-- BEGIN PAGE VENDOR JS-->
<script src="/theme-assets/vendors/js/charts/chartist.min.js" type="text/javascript"></script>

<!-- END PAGE VENDOR JS-->
<!-- BEGIN CHAMELEON  JS-->
<script src="/theme-assets/js/core/app-menu-lite.js" type="text/javascript"></script>
<script src="/theme-assets/js/core/app-lite.js" type="text/javascript"></script>

<script src="/theme-assets/js/app-menu.min.js" type="text/javascript"></script>
<script src="/theme-assets/js/app.min.js" type="text/javascript"></script>
<script src="/theme-assets/js/customizer.min.js" type="text/javascript"></script>

<script src="/theme-assets/js/core/app-lite.js" type="text/javascript"></script>
<!-- END CHAMELEON  JS-->
<!-- BEGIN PAGE LEVEL JS-->
<script src="/theme-assets/js/scripts/pages/dashboard-lite.js" type="text/javascript"></script>
<!-- END CHAMELEON  JS-->
<!-- BEGIN PAGE LEVEL JS-->
<!-- END PAGE LEVEL JS-->


<script src="/assets/js/lightgallery.js"></script>
<script>
  
    lightGallery(document.getElementById('lightgallery1'));
    lightGallery(document.getElementById('lightgallery2'));
    lightGallery(document.getElementById('lightgallery3'));
    lightGallery(document.getElementById('lightgallery4'));
    lightGallery(document.getElementById('lightgallery5'));
    lightGallery(document.getElementById('lightgallery6'));
    lightGallery(document.getElementById('lightgallery7'));
    lightGallery(document.getElementById('lightgallery8'));
    lightGallery(document.getElementById('lightgallery9'));
    lightGallery(document.getElementById('lightgallery10'));
    lightGallery(document.getElementById('lightgallery11'));
    lightGallery(document.getElementById('lightgallery12'));
</script>
<!-- Snap Gallery JS End -->

<!-- Data Table Start -->

<script src="/assets/js/jquery.dataTables.js"></script>
<script src="/assets/js/datatable-basic.init.js"></script>
<script>
    $(document).ready(function() {
        $('#zero_config87').DataTable({
        "ordering": false,
        "searching": true
    } );
        $('#zero_config2').DataTable();
        $('#zero_config3').DataTable();
        $('#zero_config4').DataTable();
        $('#zero_config5').DataTable();
    });
</script>

<!-- Data Table End -->

<!-- Productivity Graph Start -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/4.7.3/d3.min.js"></script>
<script>
    // Function to create random data in format: [date, amount]
    function createData(num) {
        let data = [];
        for (var i = 0; i < num; i++) {
            const randomNum = Math.floor(Math.random() * 100 + 1);
            let d = new Date();
            d.setDate(d.getDate() - (i * 30));
            if(i==1){
            data.push({
                date: d,
                amount: 37
            });
        }else{
            data.push({
                date: d,
                amount: 0
            });

        }
        }

        return data;
    }

    // Create + Format data
    let data = createData(12).sort(function(a, b) {
        return a.date - b.date;
    });
console.log(data);
    // what are these and are they things that someone should edit
    const margin = {
        top: 20,
        right: 0,
        bottom: 60,
        left: 30
    };
    const width = 800 - (margin.left + margin.right);
    const height = 300 - (margin.top + margin.bottom);
    const labelOffset = 50;
    const axisOffset = 16;

    // Set Time Format (JAN, FEB, etc..)
    const timeFormat = d3.timeFormat('%b');

    // Set the scales
    const x = d3.scaleBand()
        .rangeRound([0, width])
        .domain(data.map((d) => d.date))
        .padding(0.5);

    const y = d3.scaleLinear()
        .range([height, 0])
        .domain([0, d3.max(data, (d) => d.amount)]);

    // // Set the axes
    const xAxis = d3.axisBottom()
        .scale(x)
        .tickSize(0)
        .tickFormat(timeFormat)

    const yAxis = d3.axisLeft()
        .ticks(4)
        .tickSize(-width)
        .scale(y.nice());

    // // Set up SVG with initial transform to avoid repeat positioning
    const svg = d3.select('svg')
        .attr('class', 'graph')
        .attr('width', width + (margin.left + margin.right))
        .attr('height', height + (margin.top + margin.bottom))
        .append('g')
        .attr('class', 'group-container')
        .attr('transform', `translate(${margin.left}, ${margin.top})`)
        .attr('font-family', 'ibm-plex-sans');

    // // Add Y axis
    svg.append('g')
        .attr('class', 'axis y')
        .attr('stroke-dasharray', '4')
        .call(yAxis)
        .selectAll('text')
        .attr("x", -axisOffset)
        .attr('font-family', 'ibm-plex-sans');

    // // Add Y axis label
    const yLabel = svg.select('.y')
        .append('text')
        .text('USAGE ($)')
        .attr('class', 'label')
        .attr('transform', `translate(${-labelOffset}, ${height / 2}) rotate(-90)`)
        .attr('font-family', 'ibm-plex-sans');

    // // Add X axis
    svg.append('g')
        .attr('class', 'axis x')
        .attr('transform', `translate(0, ${height})`)
        .call(xAxis)
        .selectAll('text')
        .attr("y", axisOffset)
        .attr('font-family', 'ibm-plex-sans')

    // // Add X axis label
    const xLabel = svg.select('.x')
        .append('text')
        .text('MONTH')
        .attr('class', 'label')
        .attr('transform', `translate(${width / 2}, ${labelOffset})`)
        .attr('font-family', 'ibm-plex-sans');

    svg.append('g')
        .attr('class', 'bar-container')
        .selectAll('rect')
        .data(data)
        .enter().append('rect')
        .attr('class', 'bar')
        .attr('x', (d) => x(d.date))
        .attr('y', (d) => height)
        .attr('height', 0)
        .attr('width', x.bandwidth())
        .attr('fill', '#338fdb')
        .transition()
        .duration(500)
        .delay((d, i) => i * 50)
        .attr('height', (d) => height - y(d.amount))
        .attr('y', (d) => y(d.amount));

    // Select Tooltip
    const tooltip = d3.select('.tooltip');

    const bars = svg.selectAll('.bar')
        .on('mouseover', function(d) {
            let color = d3.color('#338fdb').darker()
            d3.select(this)
                .attr('fill', color)
            tooltip
                .style('display', 'inherit')
                .text(`$${d.amount}`)
                .style('top', `${y(d.amount) - axisOffset}px`);

            let bandwidth = x.bandwidth();
            let tooltipWidth = tooltip.nodes()[0].getBoundingClientRect().width;
            let offset = (tooltipWidth - bandwidth) / 2;

            tooltip
                .style('left', `${x(d.date) + margin.left - offset}px`)
        })
        .on('mouseout', function(d) {
            d3.select(this)
                .transition()
                .duration(250)
                .attr('fill', '#338fdb')
            tooltip
                .style('display', 'none')
        });
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"></script>
<script>
    var xValues = [50, 60, 70, 80];
    var yValues = [25, 50, 75, 100];

    new Chart("myChart", {
        type: "line",
        data: {
            labels: xValues,
            datasets: [{
                fill: false,
                lineTension: 0,
                backgroundColor: "rgba(0,0,255,1.0)",
                borderColor: "rgba(0,0,255,0.1)",
                data: yValues
            }]
        },
        options: {
            legend: {
                display: false
            },
            scales: {
                yAxes: [{
                    ticks: {
                        min: 0,
                        max: 100
                    }
                }],
            }
        }
    });
</script>


<script>
    $(document).ready(function() {
        $('.chart.doughnut').each(function() {
            var chartID = $(this).find('canvas').attr('id');
            var c = document.getElementById(chartID);
            var width = $('#' + chartID).width();
            var height = width;
            var linewidth = width / 10;
            c.setAttribute('width', width * 2);
            c.setAttribute('height', height * 2);
            var ctx = c.getContext('2d');
            var startingPoint = -0.5;
            ctx.scale(2, 2);
            ctx.beginPath();
            ctx.arc(height / 2, height / 2, width / 3, 0 * Math.PI, 2 * Math.PI);
            ctx.lineWidth = linewidth;
            ctx.strokeStyle = '#F2F2F2';
            ctx.shadowOffsetX = 6;
            ctx.shadowOffsetY = 6;
            ctx.shadowBlur = 20;
            ctx.shadowColor = "rgba(0,0,0,0.2)";
            ctx.stroke();
            $(this).find('li').each(function() {
                var start = startingPoint;
                var dataValue = $(this).find('data').attr('value');
                var end = startingPoint + (2 * dataValue);
                var color = $(this).find('data').data('color');
                ctx.beginPath();
                ctx.arc(height / 2, height / 2, width / 3, startingPoint * Math.PI, end * Math.PI);
                ctx.lineWidth = linewidth;
                ctx.strokeStyle = color;
                ctx.shadowColor = "rgba(0,0,0,0)";
                ctx.stroke();
                $(this).css('color', color);
            });
        });
    });
</script>

<script>
    $(document).ready(function() {
        $('.chart.doughnut2').each(function() {
            var chartID = $(this).find('canvas').attr('id');
            var c = document.getElementById(chartID);
            var width = $('#' + chartID).width();
            var height = width;
            var linewidth = width / 10;
            c.setAttribute('width', width * 2);
            c.setAttribute('height', height * 2);
            var ctx = c.getContext('2d');
            var startingPoint = -0.5;
            ctx.scale(2, 2);
            ctx.beginPath();
            ctx.arc(height / 2, height / 2, width / 3, 0 * Math.PI, 2 * Math.PI);
            ctx.lineWidth = linewidth;
            ctx.strokeStyle = '#F2F2F2';
            ctx.shadowOffsetX = 6;
            ctx.shadowOffsetY = 6;
            ctx.shadowBlur = 20;
            ctx.shadowColor = "rgba(0,0,0,0.2)";
            ctx.stroke();
            $(this).find('li').each(function() {
                var start = startingPoint;
                var dataValue = $(this).find('data').attr('value');
                var end = startingPoint + (2 * dataValue);
                var color = $(this).find('data').data('color');
                ctx.beginPath();
                ctx.arc(height / 2, height / 2, width / 3, startingPoint * Math.PI, end * Math.PI);
                ctx.lineWidth = linewidth;
                ctx.strokeStyle = color;
                ctx.shadowColor = "rgba(0,0,0,0)";
                ctx.stroke();
                $(this).css('color', color);
            });
        });
    });
</script>
</body>

</html>